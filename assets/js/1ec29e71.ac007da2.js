"use strict";(self.webpackChunk_ethereal_engine_docs=self.webpackChunk_ethereal_engine_docs||[]).push([[861],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>p});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),h=u(n),p=o,m=h["".concat(s,".").concat(p)]||h[p]||d[p]||i;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=h;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7466:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>u});var a=n(7462),o=(n(7294),n(3905));const i={},l="Ethereal Engine on AWS",r={unversionedId:"devops_deployment/AWS_setup",id:"devops_deployment/AWS_setup",title:"Ethereal Engine on AWS",description:"Create EKS cluster",source:"@site/docs/2_devops_deployment/2_AWS_setup.md",sourceDirName:"2_devops_deployment",slug:"/devops_deployment/AWS_setup",permalink:"/ethereal-engine-docs/docs/devops_deployment/AWS_setup",draft:!1,editUrl:"https://github.com/XRFoundation/Ethereal-Engine-Docs/docs/2_devops_deployment/2_AWS_setup.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Ethereal Engine on Minikube",permalink:"/ethereal-engine-docs/docs/devops_deployment/minikube"},next:{title:"Database Migrations",permalink:"/ethereal-engine-docs/docs/devops_deployment/feathers_sequelize"}},s={},u=[{value:"Create EKS cluster",id:"create-eks-cluster",level:2},{value:"Install Cluster Autoscaler (optional)",id:"install-cluster-autoscaler-optional",level:4},{value:"Create launch template",id:"create-launch-template",level:4},{value:"Create nodegroup for instanceservers",id:"create-nodegroup-for-instanceservers",level:4},{value:"Create nodegroup for redis",id:"create-nodegroup-for-redis",level:3},{value:"Create nodegroup for builder",id:"create-nodegroup-for-builder",level:3},{value:"Create ECR repositories for built images.",id:"create-ecr-repositories-for-built-images",level:2},{value:"Create IAM Roles for S3/SES/SNS/Route53 (or a single admin role)",id:"create-iam-roles-for-s3sessnsroute53-or-a-single-admin-role",level:2},{value:"Creating an IAM role",id:"creating-an-iam-role",level:3},{value:"IAM Roles to create",id:"iam-roles-to-create",level:3},{value:"Creating new credentials for an IAM user",id:"creating-new-credentials-for-an-iam-user",level:3},{value:"Create RDS box",id:"create-rds-box",level:2},{value:"Accessing RDS box from an external machine",id:"accessing-rds-box-from-an-external-machine",level:3},{value:"Create RDS instance",id:"create-rds-instance",level:3},{value:"Edit security group to allow instanceserver traffic into VPC",id:"edit-security-group-to-allow-instanceserver-traffic-into-vpc",level:2},{value:"Create Route 53 Hosted Zone and set up ACM certificates",id:"create-route-53-hosted-zone-and-set-up-acm-certificates",level:2},{value:"Purchase and register domain through Route53 (optional)",id:"purchase-and-register-domain-through-route53-optional",level:3},{value:"Create Route 53 Hosted Zone",id:"create-route-53-hosted-zone",level:3},{value:"Point external registrar subdomains to use Route53 Nameservers (only if your domain is registered outside Route53)",id:"point-external-registrar-subdomains-to-use-route53-nameservers-only-if-your-domain-is-registered-outside-route53",level:4},{value:"Create certificates with ACM",id:"create-certificates-with-acm",level:3},{value:"Install Agones, ingress-nginx, and a copy of redis for each deployment",id:"install-agones-ingress-nginx-and-a-copy-of-redis-for-each-deployment",level:2},{value:"Install Agones",id:"install-agones",level:3},{value:"Install redis for each deployment",id:"install-redis-for-each-deployment",level:3},{value:"Installing redis as part of Ethereal Engine chart (not recommended for production)",id:"installing-redis-as-part-of-ethereal-engine-chart-not-recommended-for-production",level:4},{value:"Install ingress-nginx",id:"install-ingress-nginx",level:3},{value:"Upgrade Classic LoadBalancer to Application LoadBalancer",id:"upgrade-classic-loadbalancer-to-application-loadbalancer",level:2},{value:"Set up Simple Email Service",id:"set-up-simple-email-service",level:2},{value:"Create SMTP credentials",id:"create-smtp-credentials",level:3},{value:"Move SES out of Sandbox",id:"move-ses-out-of-sandbox",level:3},{value:"Verifying test emails",id:"verifying-test-emails",level:4},{value:"Set up Simple Notification service",id:"set-up-simple-notification-service",level:2},{value:"Set up S3 bucket for static resources and Cloudfront distribution",id:"set-up-s3-bucket-for-static-resources-and-cloudfront-distribution",level:2},{value:"Create S3 bucket",id:"create-s3-bucket",level:3},{value:"Create Cloudfront distribution",id:"create-cloudfront-distribution",level:3},{value:"Set up DNS records",id:"set-up-dns-records",level:2},{value:"Create GitHub fork of Ethereal Engine repository.",id:"create-github-fork-of-ethereal-engine-repository",level:2},{value:"Grant Github-Actions-User access to cluster",id:"grant-github-actions-user-access-to-cluster",level:2},{value:"Deploy to EKS using Helm",id:"deploy-to-eks-using-helm",level:2},{value:"Fill in Helm config file with variables",id:"fill-in-helm-config-file-with-variables",level:3},{value:"Configuration variables of note",id:"configuration-variables-of-note",level:3},{value:"&lt;api/client/analytics&gt;.affinity.nodeAffinity",id:"apiclientanalyticsaffinitynodeaffinity",level:4},{value:"builder.extraEnv.PRIVATE_ECR",id:"builderextraenvprivate_ecr",level:4},{value:"(everything).image.repository",id:"everythingimagerepository",level:4},{value:"Run Helm install",id:"run-helm-install",level:3},{value:"Kick off GitHub Actions",id:"kick-off-github-actions",level:2},{value:"Overview of the build process",id:"overview-of-the-build-process",level:3},{value:"Install Elastic Search and Kibana using Helm for Server Logs",id:"install-elastic-search-and-kibana-using-helm-for-server-logs",level:2},{value:"Upgrading an existing Helm deployment",id:"upgrading-an-existing-helm-deployment",level:3}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ethereal-engine-on-aws"},"Ethereal Engine on AWS"),(0,o.kt)("h2",{id:"create-eks-cluster"},"Create EKS cluster"),(0,o.kt)("p",null,"You first need to set up an EKS cluster for Ethereal Engine to run on.\nWhile this can be done via AWS' web interface, the ",(0,o.kt)("inlineCode",{parentName:"p"},"eksctl")," CLI\nwill automatically provision more of the services you need automatically,\nand is thus recommended."),(0,o.kt)("p",null,"First, follow ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html"},"these instructions"),"\nfor setting up aws-cli, eksctl, and configuring aws-cli with your AWS credentials.\nYou should also set up kubectl and Helm, as we will be using that to install multiple codebases from Charts."),(0,o.kt)("p",null,"Next run the following command:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"eksctl create cluster --name <name> --version <version> --region <region> --managed --nodegroup-name <name> --node-type <instance type> --nodes <target_node_number> --nodes-min <minimum_node_number> --nodes-max <maximum_node_number>")),(0,o.kt)("p",null,"This will create an EKS cluster with managed nodes in the specified region, including automatically\ncreating subnets, making a VPC, and more. It may take up to 15 minutes to complete."),(0,o.kt)("p",null,"You can also use the flag ",(0,o.kt)("inlineCode",{parentName:"p"},"--zones <zone1>,<zone2>")," to specify which Availability Zones the cluster\nshould set up in. Some regions have zones that are unavailable, but which eksctl will try to\nuse if --zones is not specified, leading to the setup to fail. As an example, us-west-1 (as of this\nwriting) does not have any resources available in us-west-1b; if you are setting up in us-west-1,\nyou would want to use ",(0,o.kt)("inlineCode",{parentName:"p"},"--zones us-west-1a,us-west-1c"),"."),(0,o.kt)("p",null,"Note that the region matters for almost all services in AWS. The default region is 'us-east-1',\nbut if you make the cluster in any other region, you'll need to make sure you're creating certs,\nDNS records, etc. in the same region."),(0,o.kt)("p",null,"As of this writing, the API and client are configured to run on a nodegroup named 'ng-1'.\nIf you name it something else, be sure to change the NodeAffinity in the configuration file."),(0,o.kt)("p",null,"Make sure to increase the maximum node limit, as by default target, minimum, and maximum are\nset to 2, and Ethereal Engine's setup will definitely need more than two nodes if you've configured\nthem to use relatively small instance types such as t3a.medium."),(0,o.kt)("h4",{id:"install-cluster-autoscaler-optional"},"Install Cluster Autoscaler (optional)"),(0,o.kt)("p",null,"While not necessary, it can be useful to have an autoscaler installed in the cluster to increase\nthe number of nodes available for pods when the cluster has high traffic and to decrease that\nnumber when it has low traffic."),(0,o.kt)("p",null,"Follow ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/eks/latest/userguide/autoscaling.html#cluster-autoscaler"},"these instructions"),"\nto set up the autoscaler. Any managed nodegroups created in the following steps should by default be\ntagged such that the autoscaler can control them, so no further action should be required."),(0,o.kt)("p",null,"Note that there is some lag time on scaling up and down. It generally takes about 5 minutes from\nthe time that the autoscaler sees the need to add more nodes before those nodes have been spun up,\nthe appropriate Docker image has been installed onto them, and they are ready to be used. It takes about\n15 minutes for the autoscaler to actually remove nodes that are deemed superfluous, as a hedge against\nthe recent high traffic picking up again."),(0,o.kt)("h4",{id:"create-launch-template"},"Create launch template"),(0,o.kt)("p",null,"Go to EC2 -> Launch Templates and make a new one. Name it something like 'xrengine-production-instanceserver'.\nMost settings can be left as-is, except for the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Storage -> Add a volume, set the size to ~20GB, and for Device name select '/dev/xvda'."),(0,o.kt)("li",{parentName:"ul"},"Network Interfaces -> Add one, and under 'Auto-assign public IP' select 'Enable'")),(0,o.kt)("h4",{id:"create-nodegroup-for-instanceservers"},"Create nodegroup for instanceservers"),(0,o.kt)("p",null,"Go to the AWS website, then go to EKS -> Clusters -> click on the cluster you just made -> Configuration -> Compute.\nYou should see one managed nodegroup already there; clicking on its name will open up information\nand editing, though you can't change the instance type after it's been made."),(0,o.kt)("p",null,"Back at the Compute tab, click on Add Node Group. Pick a name (something like ng-instanceservers-1 is recommended),\nselect the IAM role that was created with the cluster (it should be something like ",(0,o.kt)("inlineCode",{parentName:"p"},"eksctl-<cluster_name>-node-NodeInstanceRole-<jumble_of_characters>"),"),\ntoggle the Use Launch Template toggle and select the launch template you made in the previous step,\nthen click Next. On the second page, Choose the instance type(s) you'd like for the group,\nset the minimum/maximum/desired scaling sizes, and hit Next (t3(a).smalls are recommended).\nThere may be connection issues with instanceserver instances in private subnets, so remove all of the private\nsubnets from the list of subnets to use, and make sure that public subnets are being used (sometimes\nthe workflow only selects private subnets by default). Hit Next, review everything, and click Create."),(0,o.kt)("h3",{id:"create-nodegroup-for-redis"},"Create nodegroup for redis"),(0,o.kt)("p",null,"Redis should get its own nodegroup to isolate it from any other changes that might be made to your cluster.\nAs with the instanceserver nodegroup, it's not strictly necessary, but can prevent various other things from\ngoing down due to the redis servers getting interrupted."),(0,o.kt)("p",null,"Back at the Compute tab, click on Add Node Group. Pick a name (the default config in packages/ops/config assumes\na name of 'ng-redis-1'), select the IAM role that was created with the cluster\n(it should be something like ",(0,o.kt)("inlineCode",{parentName:"p"},"eksctl-<cluster_name>-node-NodeInstanceRole-<jumble_of_characters>"),"),\ntoggle the Use Launch Template toggle and select the launch template used to make the initial nodegroup,\nthen click Next. On the second page, Choose the instance type(s) you'd like for the group,\nset the minimum/maximum/desired scaling sizes, and hit Next (You can probably get away with a single t3(a).small).\nThe default subnets should be fine, so hit Next, review everything, and click Create."),(0,o.kt)("h3",{id:"create-nodegroup-for-builder"},"Create nodegroup for builder"),(0,o.kt)("p",null,"The full Ethereal Engine stack needs a builder server within the cluster in order to bundle and build\nEthereal Engine projects into the codebase that will be deployed. This should run on its own nodegroup\nthat has a single node - only one copy of the builder should ever be running at a time, and\ndue to the high memory needs of building the client service, a box with >8 GB of RAM is needed."),(0,o.kt)("p",null,"Back at the Compute tab, click on Add Node Group. Pick a name (something like ",(0,o.kt)("inlineCode",{parentName:"p"},"ng-dev-builder-1")," is recommended) and\nselect the IAM role that was created with the cluster (it should be something like\n",(0,o.kt)("inlineCode",{parentName:"p"},"eksctl-<cluster_name>-node-NodeInstanceRole-<jumble_of_characters>"),"). You don't need to use any Launch Template\nfor this nodegroup. Click Next."),(0,o.kt)("p",null,"On the second page, you can change the Capacity Type to ",(0,o.kt)("inlineCode",{parentName:"p"},"Spot")," if you want to in order to save money; the builder\nservice will likely not be running very often or for too long, so the odds of it getting interrupted by Spot instance\noutages are low, and it can always re-build if that does happen. Set the Disk Size to 50 GB; it takes a good deal of\ndisk space to install and build the Ethereal Engine codebase, and the default 20 GB will almost certainly not be enough."),(0,o.kt)("p",null,"For Instance Types, you need to only select types that have more than 8 GB; t3a.xlarge are the cheapest that fit\nthis criteria. If you were to pick something with 8GB, it's highly likely that most builds would crash the node,\nas Kubernetes tends to restart nodes if they get anywhere near memory capacity.\nUnder Node Group Scaling Configuration, set all three ",(0,o.kt)("inlineCode",{parentName:"p"},"nodes")," values to 1. We only want a single copy of the builder\nat any given time, and running multiple powerful boxes can get pricey. Click Next."),(0,o.kt)("p",null,"You can leave the subnets on the next page alone and click Next. On the last page, click Create."),(0,o.kt)("h2",{id:"create-ecr-repositories-for-built-images"},"Create ECR repositories for built images."),(0,o.kt)("p",null,"The Ethereal Engine deployment process will be building multiple Docker images, and those need to be stored somewhere.\nIn AWS, that somewhere is ",(0,o.kt)("a",{parentName:"p",href:"https://us-west-1.console.aws.amazon.com/ecr/get-started"},"Elastic Container Registry"),".\nYou need to make those repositories in the same AWS region where the EKS cluster is running."),(0,o.kt)("p",null,"Go to the ECR link above and click Get Started under Create a Repository. If you're very concerned about any of your\nEthereal Engine project codebase(s) getting out, you can choose Private for Visibility Settings, but normally Public is fine.\nYou'll be needing to create multiple repositories for each deployment, e.g. several repos for a ",(0,o.kt)("inlineCode",{parentName:"p"},"dev")," deployment,\nseveral more for a ",(0,o.kt)("inlineCode",{parentName:"p"},"prod")," deployment, etc."),(0,o.kt)("p",null,"Assuming you're first doing a ",(0,o.kt)("inlineCode",{parentName:"p"},"dev")," deployment, name the first repo ",(0,o.kt)("inlineCode",{parentName:"p"},"xrengine-<deployment_name>-builder")," under Repository\nName, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"xrengine-dev-builder"),". You shouldn't need to change any other settings, though if you're using a Private\nrepo and want to turn on Tag Immutability, that's fine. The image tags that are generated should never collide, but it\nwill prevent any manual overwriting of a tag. Click Create Repository."),(0,o.kt)("p",null,"You will need to make four more repos for each of the services that are deployed as part of the Ethereal Engine stack -\n",(0,o.kt)("inlineCode",{parentName:"p"},"api"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"analytics"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"client"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"instanceserver"),", which are also in the form ",(0,o.kt)("inlineCode",{parentName:"p"},"xrengine-<deployment_name>-<service_name>"),".\ne.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"xrengine-dev-api"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"xrengine-dev-analytics"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"xrengine-dev-client"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"xrengine-dev-instanceserver"),".\nEverything else can be left alone for those, too."),(0,o.kt)("p",null,"On the ",(0,o.kt)("a",{parentName:"p",href:"https://us-west-1.console.aws.amazon.com/ecr/repositories"},"repositories page"),", you should see both of\nthe repositories you made. If you don't see any, you may be on the wrong tab up top - click Private or Public to switch\nbetween them. Also check that you're in the right AWS region. You'll see a column 'URI'. If you made public repos,\nthe URIs should be in the form ",(0,o.kt)("inlineCode",{parentName:"p"},"public.ecr.aws/<identifier>/xrengine-<deployment_name>(-builder)"),"; if you made private\nrepos, the URIs should be in the form ",(0,o.kt)("inlineCode",{parentName:"p"},"<AWS_account_id>.dkr.ecr.<AWS_region>.amazonaws.com/xrengine-<deployment>(-builder)"),".\nTake note of everything before the ",(0,o.kt)("inlineCode",{parentName:"p"},"/xrengine-<deployment_name>")," - you'll need to add that as a variable in later steps.\nIt will be called ",(0,o.kt)("inlineCode",{parentName:"p"},"ECR_URL")," there."),(0,o.kt)("h2",{id:"create-iam-roles-for-s3sessnsroute53-or-a-single-admin-role"},"Create IAM Roles for S3/SES/SNS/Route53 (or a single admin role)"),(0,o.kt)("p",null,"Ethereal Engine interfaces with several AWS services and requires credentials for these purposes. You could make\none admin role with full access to all AWS services, but we recommend making separate, scoped roles for\neach individual service. To create a role, do the following:"),(0,o.kt)("h3",{id:"creating-an-iam-role"},"Creating an IAM role"),(0,o.kt)("p",null,"Go to IAM->Users, and click on the Add User button. For User Name, enter ",(0,o.kt)("inlineCode",{parentName:"p"},"<service>-admin"),", e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"S3-admin"),".\nCheck the box for Programmatic Access, the click on the Next:Permissions button.\nClick on 'Attach existing policies directly'. In the Filter Policies text box, you'll want to\nenter the name of the service to narrow down the policy list significantly. Then, look for the FullAccess\npolicy for that service and select that, and click the Next:Tags button. You don't need to tag it with\nanything, just click the Next:Review button, then the Create User button."),(0,o.kt)("p",null,"The following screen should show Success and have the user listed. Copy the 'Access key ID' somewhere, and\nalso click the Show toggle under 'Secret access key' and copy that elsewhere as well. You will put these\ninto the Helm config file later."),(0,o.kt)("h3",{id:"iam-roles-to-create"},"IAM Roles to create"),(0,o.kt)("p",null,"Here are the services you want to create IAM admin users for, and the associated permissions you want to\ngrant them:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Route53: ",(0,o.kt)("inlineCode",{parentName:"li"},"AmazonRoute53FullAccess")," "),(0,o.kt)("li",{parentName:"ul"},"S3: ",(0,o.kt)("inlineCode",{parentName:"li"},"AmazonS3FullAccess, CloudFrontFullAccess")),(0,o.kt)("li",{parentName:"ul"},"SNS: ",(0,o.kt)("inlineCode",{parentName:"li"},"AmazonSNSFullAccess"))),(0,o.kt)("p",null,"You'll also need to create an IAM user that GitHub Actions can use to access the cluster and push/pull\nDocker images from ECR. By convention, we call this user 'Github-Actions-User', and it needs these\npermissions: ",(0,o.kt)("inlineCode",{parentName:"p"},"AmazonEKSClusterPolicy, AmazonEKSWorkerNodePolicy, AmazonEKSServicePolicy, AmazonElasticContainerRegistryPublicAccess, AmazonEC2ContainerRegistryFullAccess")),(0,o.kt)("h3",{id:"creating-new-credentials-for-an-iam-user"},"Creating new credentials for an IAM user"),(0,o.kt)("p",null,"If you ever lose the secret to a user, or want to make new credentials for whatever reason, go to\nIAM->Users and click on that user. Click on the 'Security credentials' tab, and under 'Access keys' you\nshould see a button 'Create access key' and, underneath that, 0-2 existing keys with some information\nabout them and an 'x' on the far right to delete it. If there are two keys for that user, you\nmust deactivate and delete one of them before making a new one."),(0,o.kt)("p",null,"Click the Create button, then make sure to save the public and secret keys somewhere and put them into\nthe Helm config file."),(0,o.kt)("h2",{id:"create-rds-box"},"Create RDS box"),(0,o.kt)("p",null,"Ethereal Engine is backed by a SQL server. We use MariaDB in development, but it has also been run on AWS with\nAurora without issue. Most other versions of SQL should work but have not been explicitly tested."),(0,o.kt)("h3",{id:"accessing-rds-box-from-an-external-machine"},"Accessing RDS box from an external machine"),(0,o.kt)("p",null,"By default, an RDS box is only accessible from within the VPC it's located.\nIf you want to be able to connect to it from outside that VPC, you'll need to either set up a bastion box\nand SSH into that box, or make the RDS box publicly accessible."),(0,o.kt)("p",null,"Setting up a bastion box is not covered here at this time. The steps to make it public will be noted\nbelow by ",(0,o.kt)("strong",{parentName:"p"},"Make RDS public")),(0,o.kt)("h3",{id:"create-rds-instance"},"Create RDS instance"),(0,o.kt)("p",null,"Go to RDS and click the Create Database button. Most options can be left at their default values.\nUnder Settings, give a more descriptive DB cluster identifier. The Master Username can be left as admin;\nenter a Master Password and then enter it again in Confirm Password."),(0,o.kt)("p",null,"Under DB instance class, pick an option that best meets your pricing needs."),(0,o.kt)("p",null,"Under Availability and Durability, it's recommended that you leave it on the default of\nmaking an Aurora Replica in another AZ."),(0,o.kt)("p",null,"Under Connectivity, make sure that it's in the VPC that was made as part of the EKS cluster."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Make RDS public"),"\nIf you want to be able to access it externally, you should set Public Access to 'Yes'."),(0,o.kt)("p",null,"Under VPC security group, select the ones titled\n",(0,o.kt)("inlineCode",{parentName:"p"},"eksctl-<EKS_cluster_name>-cluster-ClusterSharedNodeSecurityGroup-<random_string>")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"eks-clustersg-<EKS_cluster_name>-<random_string>"),"."),(0,o.kt)("p",null,"Open the top-level Additional Configuration dropdown (not the one within Connectivity). Under Database Options-> Initial Database Name,\nname the default database and save this for later use in the Helm config file."),(0,o.kt)("p",null,"Finally, click the Create Database button at the very bottom of the page."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Make RDS Public")," You will need to add a Security Group to the RDS instance that allows traffic over port\n3306 (or whatever port you chose to run it on). You can have this SG only let in traffic from your IP address(es)\nif you want to be very secure about this, or from anywhere (0.0.0.0/0) if you're less concerned about someone\ngetting access."),(0,o.kt)("h2",{id:"edit-security-group-to-allow-instanceserver-traffic-into-vpc"},"Edit security group to allow instanceserver traffic into VPC"),(0,o.kt)("p",null,"You'll need to edit the new cluster's main security group to allow instanceserver traffic.\nOn the AWS web client, go to EC2 -> Security Groups. There should be three SGs that have\nthe node's name somewhere in their name; look for the one that is in the form\n",(0,o.kt)("inlineCode",{parentName:"p"},"eks-cluster-sg-<cluster_name>-<random_numbers>"),". It should NOT end with /ControlPlaneSecurityGroup\nor /ClusterSharedNodeSecurityGroup.\nClick on that, then the Inbound Rules tab, then click Edit Inbound Rules."),(0,o.kt)("p",null,"You'll need to add two rule sets:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Type: Custom UDP; Port Range: 7000-8000; Source: Anywhere (or 'Custom 0.0.0.0/0')"),(0,o.kt)("li",{parentName:"ul"},"Type: Custom TCP; Port Range: 7000-8000; Source: Anywhere (or 'Custom 0.0.0.0/0')")),(0,o.kt)("h2",{id:"create-route-53-hosted-zone-and-set-up-acm-certificates"},"Create Route 53 Hosted Zone and set up ACM certificates"),(0,o.kt)("p",null,"Before installing Nginx to the cluster, you'll need to have all of the networking squared away.\nThis requires creating the necessary SSL certificates and creating some DNS records to point\nvarious subdomains to the right place."),(0,o.kt)("h3",{id:"purchase-and-register-domain-through-route53-optional"},"Purchase and register domain through Route53 (optional)"),(0,o.kt)("p",null,"If you do not have a domain for your application already, it's easiest to register it through Route53.\nGo to Route53->Domains->Registered domains, then click the 'Register Domain' button, and follow the\nworkflow to register a domain name."),(0,o.kt)("h3",{id:"create-route-53-hosted-zone"},"Create Route 53 Hosted Zone"),(0,o.kt)("p",null,"In the AWS web client, go to Route 53. Make a hosted zone for the domain you plan to use for\nyour setup of Ethereal Engine. You'll be coming back here later to create DNS records."),(0,o.kt)("h4",{id:"point-external-registrar-subdomains-to-use-route53-nameservers-only-if-your-domain-is-registered-outside-route53"},"Point external registrar subdomains to use Route53 Nameservers (only if your domain is registered outside Route53)"),(0,o.kt)("p",null,"If you already have a domain registered with another registrar service, you'll need to add some DNS records\nin there to point the specific subdomains you'll be using to AWS' nameservers."),(0,o.kt)("p",null,"First, go to Route53->Hosted Zones and open the domain you'll be using by clicking on the domain name (or\nhighlighting the row and clicking the 'View details' button). There should be two records under Records.\nLook for the one of type 'NS'; under 'Value/Route traffic to', there should be four lines that all start\nwith 'ns-'. These will be used shortly."),(0,o.kt)("p",null,"Go to your external registrar and go to the DNS records page. For each subdomain that will be in use, you\nneed to add four records of type 'NS'. The Name wil be the subdomain, and the Nameserver will be one of\nthe four lines under the 'NS'. You need a record for each of the four lines."),(0,o.kt)("p",null,"If you're setting up multiple deployments, e.g. both a dev and prod deployment, you'll need a set of four\nNS records for each subdomain that those deployments will be behind."),(0,o.kt)("h3",{id:"create-certificates-with-acm"},"Create certificates with ACM"),(0,o.kt)("p",null,"Go to Amazon Certificate Manager. If there are no certs in that region, click on Get Started under Provision Certificates,\notherwise click on Request a Certificate."),(0,o.kt)("p",null,"You should select Request a Public Certificate, then select Request a Certificate. The next page\nshould be headed Add Domain Names. You should add both the top-level domain, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"ethereal-engine.io"),",\nas well as a wildcard for all subdomains e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"*.ethereal-engine.io"),", then click Next."),(0,o.kt)("p",null,"Choose DNS Validation on the next page and click Next. You can skip adding tags and just click Review,\nthen Confirm on the final page."),(0,o.kt)("p",null,"You should be sent to a page headed Validation. Click on the arrow next to each domain to open more\noptions. Click on the button Create Record in Route 53 to open a confirmation modal, and in that modal\nclick Create."),(0,o.kt)("p",null,"As it indicates, it can take up to 30 minutes for these domains to be validated. If you click on Complete\nafter triggering the record creation for each of them, you should be sent back to the Certificates page.\nOpening the cert you just made will show the validation status of each domain."),(0,o.kt)("p",null,"If you open the details of this certificate, there should be a field 'ARN' with a value that looks\nsomething like ",(0,o.kt)("inlineCode",{parentName:"p"},"arn:aws:acm:<region>:<AWS account ID>:certificate/<a UUID>"),". Take note of this for later,\nwhen you go to install ingress-nginx."),(0,o.kt)("p",null,"You should follow the above instructions to make a second certificate for ",(0,o.kt)("inlineCode",{parentName:"p"},"resources.<domain>"),".\nNote that this certificate MUST be made in us-east-1, regardless of which region everything else is\nset up in; as of this writing, CloudFront can only use certificates in us-east-1."),(0,o.kt)("h2",{id:"install-agones-ingress-nginx-and-a-copy-of-redis-for-each-deployment"},"Install Agones, ingress-nginx, and a copy of redis for each deployment"),(0,o.kt)("p",null,"Now that the cluster is up and running, we can install everything onto it.\nWhen you created the cluster with eksctl, it should have created a context pointing to\nit in kubectl. Run ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl config get-contexts")," to get all of the contexts it knows about;\nthe one with a star next to it should be named ",(0,o.kt)("inlineCode",{parentName:"p"},"<your_AWS_username>@<cluster_name>"),".\nIf that isn't present, you'll have to edit the configuration to make the appropriate context."),(0,o.kt)("p",null,"You next need to add the Agones, ingress-nginx, and redis Helm charts to helm by running\n",(0,o.kt)("inlineCode",{parentName:"p"},"helm repo add agones https://agones.dev/chart/stable"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"helm repo add redis https://charts.bitnami.com/bitnami"),".\nYou should also at this time add Ethereal Engine's repo via ",(0,o.kt)("inlineCode",{parentName:"p"},"helm repo add xrengine https://helm.xrengine.io"),"."),(0,o.kt)("p",null,"If you ever suspect that a chart is out-of-date, run ",(0,o.kt)("inlineCode",{parentName:"p"},"helm repo update")," to update all of them to the latest."),(0,o.kt)("h3",{id:"install-agones"},"Install Agones"),(0,o.kt)("p",null,"From the top level of this repo, run ",(0,o.kt)("inlineCode",{parentName:"p"},"helm install -f ./packages/ops/configs/agones-default-values.yaml agones agones/agones"),".\nThis says to install a service called 'agones' from the 'agones' package in the 'agones' chart, and to configure it with\na file found at /packages/ops/configs/agones-default-values.yaml."),(0,o.kt)("h3",{id:"install-redis-for-each-deployment"},"Install redis for each deployment"),(0,o.kt)("p",null,"Each deployment of Ethereal Engine uses a redis cluster for coordinating the 'feathers-sync' library.\nEach redis deployment needs to be named the same as the deployment that will use it; for an\nEthereal Engine deployment named 'dev', the corresponding redis deployment would need to be named\n'dev-redis'."),(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"helm install  -f packages/ops/configs/redis-values.yaml <deployment_name>-redis redis/redis")," to install, e.g.\n",(0,o.kt)("inlineCode",{parentName:"p"},"helm install  -f packages/ops/configs/redis-values.yaml dev-redis redis/redis"),".\nIf you named the redis nodegroup something other than 'ng-redis-1', you'll have to alter the value in\npackages/ops/configs/redis-values.yaml in two places to your redis nodegroup name.\nIf you didn't create a nodegroup just for redis, you must omit the ",(0,o.kt)("inlineCode",{parentName:"p"},"-f packages/ops/configs/redis-values.yaml"),",\nas that config makes redis pods run on a specific nodegroup."),(0,o.kt)("h4",{id:"installing-redis-as-part-of-ethereal-engine-chart-not-recommended-for-production"},"Installing redis as part of Ethereal Engine chart (not recommended for production)"),(0,o.kt)("p",null,"Redis can be installed as part of the Ethereal Engine chart so long as the config file for the Ethereal Engine installation has 'redis.enabled' set to true.\nIn that case, you should skip the above step of installing redis separately. This is not recommended for production\nenvironments, though, since upgrades to an Ethereal Engine installation will usually reboot the redis servers,\nleading all of the instanceservers to crash due to their redis connections being severed."),(0,o.kt)("p",null,"This breaks Agones' normal behavior of keeping Allocated instanceservers running until every user has left and slowly replacing\nold Ready instanceservers with new ones, maintaining an active pool of instanceservers at all times. You will encounter a period\nof time where there are no active instanceservers at all, which is not recommended, and all instanceservers in use\nwill immediately go down."),(0,o.kt)("h3",{id:"install-ingress-nginx"},"Install ingress-nginx"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"This step cannot finish until the associated ACM Certificate is fully validated"),"\nOpen the file ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/ops/configs/nginx-ingress-aws-values.yml"),". Take note of the line\n",(0,o.kt)("inlineCode",{parentName:"p"},'service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "<ACM Certificate ARN for SSL>"'),"\nReplace the bit in angle brackets, including the angle brackets, with the ARN of the certificate\nyou made for the top-level domain and all wildcarded subdomains, e.g.\n",(0,o.kt)("inlineCode",{parentName:"p"},'service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-west-1:103947711118:certificate/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"')),(0,o.kt)("p",null,"Do not commit this file with the ARN inserted; once you've completed this step, revert the file back\nto the state it was committed in."),(0,o.kt)("p",null,"From the top level of this repo, run ",(0,o.kt)("inlineCode",{parentName:"p"},"helm install -f ./packages/ops/configs/nginx-ingress-aws-values.yml nginx ingress-nginx/ingress-nginx"),"\nThis says to install a service called 'nginx' from the 'ingress-nginx' package in the 'ingress-nginx' chart, and to configure it with\na file found at /packages/ops/configs/nginx-ingress-aws-values.yml."),(0,o.kt)("h2",{id:"upgrade-classic-loadbalancer-to-application-loadbalancer"},"Upgrade Classic LoadBalancer to Application LoadBalancer"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"This step cannot be done until the ingress-nginx service installation step has completed, which requires the associated ACM Certificate to be validated")),(0,o.kt)("p",null,"By default, Kubernetes LoadBalancer Services will create Classic LoadBalancers in AWS.\nThere are features of Application LoadBalancers we'd like to have though.\nIn the AWS web client, go to EC2 -> Load Balancing -> Load Balancers.\nThere should be one Classic loadbalancer there. If there are others from other projects,\nfind the one that the cluster just made; clicking through to its VPC should show whether\nit's the one you're looking for (the VPC should be named ",(0,o.kt)("inlineCode",{parentName:"p"},"eksctl-<cluster_name>-cluster"),")."),(0,o.kt)("p",null,"When you've highlighted the correct LB, click on the tab Migration, then click the button\nLaunch ALB Migration Wizard. You shouldn't have to select anything on the page that comes\nup, just hit Create and then Close once it finishes."),(0,o.kt)("p",null,"When you go back to the Load Balancer list, make note of the DNS name of the Application\nloadbalancer you just created. It should be similar to the name of the classic one."),(0,o.kt)("p",null,"Highlight the new ALB and click on the Listeners tab. Select the HTTPS:443 listener and click Edit.\nThere should be one entry under Default Action(s), and it should be Forward To ",(0,o.kt)("inlineCode",{parentName:"p"},"<ID of both load balancers>"),".\nClick the pencil icon on the left to edit it, then open the accordion for Group-Level Stickiness,\ncheck the checkbox next to Enable Up To and switch 'hours' to 'days', leaving it as 'Enable up to 1 days'.\n(Several hours would also be an acceptable setting; we just don't want connections to time out after an hour).\nClick the checkmark at the bottom of this accordion, then the Update button near the top of the screen."),(0,o.kt)("h2",{id:"set-up-simple-email-service"},"Set up Simple Email Service"),(0,o.kt)("p",null,"You need to set up Simple Email Service so that login links can be sent."),(0,o.kt)("p",null,"In the AWS web client, go to SES -> Domains. Click Verify a New Domain, then enter the top-level\ndomain and check the box for Generate DKIM Settings, then click Verify This Domain.\nOn the modal that pops up, there should be a button to create all the records in Route 53;\nclick it. Then click Close."),(0,o.kt)("h3",{id:"create-smtp-credentials"},"Create SMTP credentials"),(0,o.kt)("p",null,"You need to create SMTP credentials in order to authorize SES. These will show up as an IAM user,\nbut you must go through an SES-specific process to get valid credentials; just creating an IAM user\nwith SESFullAccess will not work."),(0,o.kt)("p",null,"Go to an SES page and select 'SMTP Settings', then click the button 'Create My SMTP Credentials'.\nYou can leave the default IAM User Name as-is; click the Create button. You should be taken to a screen\nsays a user has been created successfully. Click on 'Show User SMTP Security Credentials'."),(0,o.kt)("p",null,"You will see a Username and Password. The Username is like any other IAM user ID, but the Password\nneeds to be transformed in order to make it a valid Secret."),(0,o.kt)("p",null,"These credentials will go into the Helm config file. You must also fill in the region that you've\ncreated these credentials in, replacing <SES_REGION> in api.extraEnv.SMTP_HOST."),(0,o.kt)("h3",{id:"move-ses-out-of-sandbox"},"Move SES out of Sandbox"),(0,o.kt)("p",null,"By default, SES domains are in Sandbox mode, where they can only send emails to verified email addresses.\nTo request that the domain be moved out of Sandbox mode, go to SES->Email Sending->Sending Statistics.\nClick on the button 'Edit your account details' to open the modal. Set 'Enable Production Access' to Yes,\nleave Mail type on 'Transactional', then fill in the Website URL, add a Use case description (basically\njust assure them that this is for account login only, not anything else), click the checkbox to agree\nto their TOD, and click the button 'Submit for review'."),(0,o.kt)("p",null,"It may take up to a few days for them to take action. If the request is rejected, address their concerns.\nOnce you have been approved, email login should work for any email address."),(0,o.kt)("h4",{id:"verifying-test-emails"},"Verifying test emails"),(0,o.kt)("p",null,"Before you have production use for your SES domain, in order to log in you'll have to verify specific email\naddresses with SES. Go to SES->Identity Management->Email Addresses. Click on the button 'Verify a New Email\nAddress'. Enter the address you want to test with, then click 'Verify This Email Address'. You should soon\nreceive an email with a link to verify it (it may go to your Spam folder). Once you've followed the link,\nyou can log in with that address."),(0,o.kt)("h2",{id:"set-up-simple-notification-service"},"Set up Simple Notification service"),(0,o.kt)("p",null,"SNS is used to send text messages from the Ethereal Engine platform."),(0,o.kt)("p",null,"In the AWS web client, go to SNS -> Topics and Create a new topic.\nGive it a name, and selected 'Standard' as the type, then click Create Topic."),(0,o.kt)("h2",{id:"set-up-s3-bucket-for-static-resources-and-cloudfront-distribution"},"Set up S3 bucket for static resources and Cloudfront distribution"),(0,o.kt)("p",null,"Various static files are stored in S3 behind a Cloudfront distribution."),(0,o.kt)("h3",{id:"create-s3-bucket"},"Create S3 bucket"),(0,o.kt)("p",null,"In the AWS web client, go to S3 -> Buckets and click Create Bucket.\nName the bucket ",(0,o.kt)("inlineCode",{parentName:"p"},"<name>-static-resources"),", e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"ethereal-engine-static-resources"),", and have it be in Region us-east-1.\nUnder Object Ownership, select 'ACLs enabled', and under that select 'Object Writer'.\nUnder Block Public Access Settings For The Bucket, uncheck the checkbox Block ",(0,o.kt)("em",{parentName:"p"},"all")," Public Access;\nyou need the bucket to be publicly accessible.\nCheck the box that pops up confirming that you know the contents are public.\nAll other settings can be left to their default values; click Create Bucket."),(0,o.kt)("p",null,"Open the bucket's settings and go the Permissions tab. Midway down is 'Access control list'. Edit that, and\nCheck the boxes for Objects:List and Bucket ACL:Read for 'Everyone (public access)'. Click the box with the\nwarning label that appears that says \"I understand the effects of these changes on my objects and buckets\",\nthen click Save Changes.\nAt the bottom of the Permissions tab is a Cross-origin Resource Sharing (CORS) box.\nIt should have the following settings; if not, click Edit and copy this in:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'[\n    {\n        "AllowedHeaders": [],\n        "AllowedMethods": [\n            "HEAD",\n            "GET",\n            "POST"\n        ],\n        "AllowedOrigins": [\n            "*"\n        ],\n        "ExposeHeaders": []\n    }\n]\n')),(0,o.kt)("h3",{id:"create-cloudfront-distribution"},"Create Cloudfront distribution"),(0,o.kt)("p",null,"In the AWS web client, go to Cloudfront -> Distributions and click on Create Distribution.\nUnder 'Web', click on Get Started."),(0,o.kt)("p",null,"Under Origin Settings, click on the box next to Origin Domain Name, and select the name of the S3 bucket you just made."),(0,o.kt)("p",null,"Under Default Cache Behavior Settings, Allowed HTTP Methods should be set to 'GET, HEAD, OPTIONS'.\nCache and origin request settings should be left on 'Use a cache policy and origin request policy'.\nFor Origin Request Policy, select 'Managed-CORS-S3Origin'"),(0,o.kt)("p",null,"Under Distribution Settings, you can change Price Class to 'Use Only U.S. Canada and Europe' to save some money.\nFor Alternate Domain Names, enter 'resources.",(0,o.kt)("inlineCode",{parentName:"p"},"<domain>"),"', e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"resources.ethereal-engine.io"),".\nFor SSL Certificate, select Custom SSL Certificate, then when you click on the box, choose\nthe 'resources.",(0,o.kt)("inlineCode",{parentName:"p"},"<domain>"),"' certificate you made earlier."),(0,o.kt)("p",null,"Everything else can be left at the default values, click Create Distribution."),(0,o.kt)("h2",{id:"set-up-dns-records"},"Set up DNS records"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"The Nginx Load Balancer must be fully set up and running before this step can be completed")),(0,o.kt)("p",null,"In the AWS web client, go to Route 53, then go into the Hosted Zone you made earlier.\nClick on Create Record. If it starts you under Quick Create Record, click the link\n'Switch to Wizard'; it's not necessary, but the wizard is handy."),(0,o.kt)("p",null,"Under Routing Policy, leave it on Simple Routing and click Next. Then click Define Simple Record."),(0,o.kt)("p",null,"The first record should be for the top-level domain, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"ethereal-engine.io"),", so leave the Record Name\ntext field blank. Under Value/Route Traffic To, click on the dropdown and select\nAlias to Application and Classic Load Balancer. Select the region that your cluster is in.\nWhere it says Choose Load Balancer, click the dropdown, and select the Application loadbalancer - make\nsure you're selecting the Application LB and not the Classic LB, which are easy to get mixed up since everything\nbefore the '-' in the name is the same.\nLeave the Record Type as 'A - Route traffic to an IPv4 address and some AWS resources', then click\nDefine Simple Record."),(0,o.kt)("p",null,"You can keep clicking Define Simple Record to make more records in one batch. When you're\ndone, click Create Records."),(0,o.kt)("p",null,"You should make the following 'A' records to the loadbalancer, substituting your domain for 'ethereal-engine.io':"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"ethereal-engine.io"),(0,o.kt)("li",{parentName:"ul"},"*.ethereal-engine.io"),(0,o.kt)("li",{parentName:"ul"},"@.ethereal-engine.io"),(0,o.kt)("li",{parentName:"ul"},"api-dev.ethereal-engine.io"),(0,o.kt)("li",{parentName:"ul"},"api.ethereal-engine.io"),(0,o.kt)("li",{parentName:"ul"},"dev.ethereal-engine.io"),(0,o.kt)("li",{parentName:"ul"},"instanceserver.ethereal-engine.io"),(0,o.kt)("li",{parentName:"ul"},"instanceserver-dev.ethereal-engine.io")),(0,o.kt)("p",null,"You also need to make an 'A' record pointing 'resources.ethereal-engine.io' to the CloudFront distribution you made earlier."),(0,o.kt)("h2",{id:"create-github-fork-of-ethereal-engine-repository"},"Create GitHub fork of Ethereal Engine repository."),(0,o.kt)("p",null,"The Ethereal Engine codebase is most easily deployed by forking it and configuring some Secrets so that the included GitHub\nActions can run the deployment for you. You can run all of the commands that the ",(0,o.kt)("inlineCode",{parentName:"p"},"<dev/prod>"),"-deploy action runs manually\nif you so choose, and in that case, you don't need to fork the GH repo."),(0,o.kt)("p",null,"Go to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/XRFoundation/XREngine"},"https://github.com/XRFoundation/XREngine"),". In the upper right-hand corner, there's a button 'Fork'. Click that,\nthen click the account/organization you wish to fork it to. You should be taken to your fork in a short time."),(0,o.kt)("p",null,"You'll need to set several Secrets (runtime variables) for GitHub Actions. By default GitHub Actions should be fully\nenabled, but you can double-check by going to Settings->Actions. Allow All Actions should be selected under Actions\nPermissions."),(0,o.kt)("p",null,"Next click on Secrets under Settings. There should be none by default. Click on New Repository Secret near the top of\nthis page to make a new one. You will need to make several Secrets with the following Names and Values:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"AWS_ACCESS_KEY -> The public Key of the Github-Actions-User IAM user"),(0,o.kt)("li",{parentName:"ul"},"AWS_REGION -> The region of your ECR repos and EKS cluster"),(0,o.kt)("li",{parentName:"ul"},"AWS_SECRET -> The secret key of the Github-Actions-User IAM user"),(0,o.kt)("li",{parentName:"ul"},"CLUSTER_NAME -> The name of the EKS cluster"),(0,o.kt)("li",{parentName:"ul"},"DEPLOYMENTS_ENABLED -> Set to ",(0,o.kt)("inlineCode",{parentName:"li"},"true")),(0,o.kt)("li",{parentName:"ul"},"DEV_REPO_NAME -> The base name of the dev ECR repository, e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"ethereal-engine-dev")," (all references to the builder and service repos will append ",(0,o.kt)("inlineCode",{parentName:"li"},"-builder"),"/",(0,o.kt)("inlineCode",{parentName:"li"},"-<service>")," to this value)"),(0,o.kt)("li",{parentName:"ul"},"DOCKER_LABEL -> This can be almost anything, but you can use ",(0,o.kt)("inlineCode",{parentName:"li"},"lagunalabs/xrengine")),(0,o.kt)("li",{parentName:"ul"},"ECR_URL -> The root ECR_URL for your repos, i.e. everything before the ",(0,o.kt)("inlineCode",{parentName:"li"},"/ethereal-engine-dev-builder"),", e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"11111111111.dkr.ecr.us-west-1.amazonaws.com")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"public.ecr.aws/a1b2c3d4")),(0,o.kt)("li",{parentName:"ul"},"PRIVATE_ECR -> Set this to ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," if your ECR repos are private, if they're public you don't need to set this at all")),(0,o.kt)("p",null,"If you go to the Actions Tab, you might see a few workflow runs with green checkmarks. If so, you'll be re-running the\n",(0,o.kt)("inlineCode",{parentName:"p"},"dev-deploy")," workflow shortly; its initial run just ran a check to see if it should do a deployment based on\n",(0,o.kt)("inlineCode",{parentName:"p"},"DEPLOYMENTS_ENABLED"),", and since that wasn't set to true, it didn't do anything else. Now that that's set to true,\nre-running it will trigger a deployment."),(0,o.kt)("p",null,"If you're asked to enable actions when going to the tab, and there are no runs listed after enabling actions, then you'll have to\ntrigger the workflow by pushing new code to the dev branch."),(0,o.kt)("h2",{id:"grant-github-actions-user-access-to-cluster"},"Grant Github-Actions-User access to cluster"),(0,o.kt)("p",null,"By default, only the IAM user who set up an EKS cluster may access it.\nIn order to let other users access the cluster, you must apply an aws-auth configmap to the cluster\ngranting access to specific IAM users. A template for this file can be found in packages/ops/config/aws-auth-template.yml."),(0,o.kt)("p",null,"You'll need to provide a few values for this file. To find ",(0,o.kt)("inlineCode",{parentName:"p"},"<rolearn>"),", in AWS go to EKS->Clusters->\n",(0,o.kt)("inlineCode",{parentName:"p"},"<your cluster>"),"->Compute->Select a nodegroup.  In the details should be 'Node IAM Role ARN'; copy this\nand replace ",(0,o.kt)("inlineCode",{parentName:"p"},"<rolearn>")," in the aws-auth file. ",(0,o.kt)("inlineCode",{parentName:"p"},"<account_id>")," is the ID of your AWS account; in the upper\nright corner of the AWS client should be ",(0,o.kt)("inlineCode",{parentName:"p"},"<your_username>@<abcd-1234-efgh>"),". The 12-character string\nafter the @ is the account ID. Make sure to remove the ",(0,o.kt)("inlineCode",{parentName:"p"},"-"),"'s from the account ID when pasting it in.\n",(0,o.kt)("inlineCode",{parentName:"p"},"<IAM_username>")," is the username of the IAM user you want to give access, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"Github-Actions-User"),"."),(0,o.kt)("p",null,"You can add multiple users by copying the ",(0,o.kt)("inlineCode",{parentName:"p"},"- groups:")," section under ",(0,o.kt)("inlineCode",{parentName:"p"},"mapUsers"),", e.g."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"  mapUsers: |\n    - groups:\n      - system:masters\n      userarn: arn:aws:iam::abcd1234efgh:user/Github-Actions-User\n      username: Github-Actions-User\n    - groups:\n      - system:masters\n      userarn: arn:aws:iam::acbd1234efgh:user/FSmith\n      username: FSmith\n")),(0,o.kt)("p",null,"When the aws-auth config file is filled in, just run ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl apply -f path/to/aws-auth.yml"),"."),(0,o.kt)("h2",{id:"deploy-to-eks-using-helm"},"Deploy to EKS using Helm"),(0,o.kt)("p",null,"With all of the networking set up, you can finally deploy the codebase to EKS.\nThere's a couple of steps to this, which will involve deploying things with most but not all of the needed\nconfiguration values, and then letting the deployment process fill in the rest."),(0,o.kt)("h3",{id:"fill-in-helm-config-file-with-variables"},"Fill in Helm config file with variables"),(0,o.kt)("p",null,"Template Helm config files for dev and prod deployments can be found at packages/ops/configs/<dev/prod>.template.values.yaml.\nBefore filling them in, make a copy elsewhere, call that '<dev/prod>.values.yaml', and edit that copy.\nBoth the builder and main deployments should use the same config file. When the builder seeds the database,\nit needs a number of values that only need to be configured for the other services, so all of the values\nneed to be defined in one config file."),(0,o.kt)("p",null,"There are many fields to fill in, most marked with ",(0,o.kt)("inlineCode",{parentName:"p"},"<>"),". Not all are necessary for all situations - if you're not\nusing social login, for instance, you don't need credentials for Github/Google/Facebook/etc."),(0,o.kt)("h3",{id:"configuration-variables-of-note"},"Configuration variables of note"),(0,o.kt)("p",null,"Here are some configuration variables that you'll probably need to change based on your specific setup"),(0,o.kt)("h4",{id:"apiclientanalyticsaffinitynodeaffinity"},"<api/client/analytics>.affinity.nodeAffinity"),(0,o.kt)("p",null,"Within the sections of the config for the api, client, instanceserver, etc., is a section that looks\nsomething like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n          - matchExpressions:\n              - key: eks.amazonaws.com/nodegroup\n                operator: In\n                values:\n                  - ng-1\n")),(0,o.kt)("p",null,"The value, ",(0,o.kt)("inlineCode",{parentName:"p"},"ng-1")," in this example, must be changed to match whatever the name of the nodegroup that\nthat service will be running on, e.g. if you create a nodegroup for the instanceservers called\n",(0,o.kt)("inlineCode",{parentName:"p"},"abcd-instanceservers-5"),", then you'd use that value under ",(0,o.kt)("inlineCode",{parentName:"p"},"values:")),(0,o.kt)("p",null,"If your EKS setup created a nodegroup for you, and you want to use that for the api, client, and\nanalytics servers, make sure to change the affinity value for them to whatever EKS named the\ninitial nodegroup."),(0,o.kt)("h4",{id:"builderextraenvprivate_ecr"},"builder.extraEnv.PRIVATE_ECR"),(0,o.kt)("p",null,'If you\'re using a private ECR repo, set this to "true" in the builder config file.'),(0,o.kt)("h4",{id:"everythingimagerepository"},"(everything).image.repository"),(0,o.kt)("p",null,"You'll need to replace every <repository_name> with the full ECR_URL of your non-builder repos, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"abcd1234efgh.dkr.ecr.us-west-1.amazonaws.com/ethereal-engine-dev-api"),".\nEach services has to have the proper ",(0,o.kt)("inlineCode",{parentName:"p"},"-<service>")," suffix on it, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"-api"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"-client"),", etc."),(0,o.kt)("h3",{id:"run-helm-install"},"Run Helm install"),(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"helm install -f </path/to/*.values.yaml> <stage_name>-builder xrengine/xrengine-builder"),"\nand the run ",(0,o.kt)("inlineCode",{parentName:"p"},"helm install -f </path/to/*.values.yaml> <stage_name> xrengine/xrengine")),(0,o.kt)("p",null,"This will spin up the main and builder deployments using the Helm config file, <dev/prod>.values.yaml.\nNeither will fully work yet, since there's no valid image in the repos yet. The GitHub\nActions and builder processes will make those images and update the deployments with the tags of the images they've built\nso that they can pull down and use those images."),(0,o.kt)("h2",{id:"kick-off-github-actions"},"Kick off GitHub Actions"),(0,o.kt)("p",null,"In GitHub, if you go to back to the Actions tab, you should see a ",(0,o.kt)("inlineCode",{parentName:"p"},"dev-deploy")," action. Click on it, and you should see\na page showing its status, which should be all green checkmarks or indicators that things didn't run. In the upper\nright, click ",(0,o.kt)("inlineCode",{parentName:"p"},"Re-run all jobs"),". This will start it again, and now that ",(0,o.kt)("inlineCode",{parentName:"p"},"DEPLOYMENTS_ENABLED")," is set to true, it should\nattempt to build and deploy the builder."),(0,o.kt)("p",null,"(If actions were disabled at first, you'll have to merge additional code into the dev branch to get it to start the dev-deploy process)"),(0,o.kt)("h3",{id:"overview-of-the-build-process"},"Overview of the build process"),(0,o.kt)("p",null,"The full build and deployment process works like this:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"GitHub Actions builds just enough of the Ethereal Engine monorepo to fetch any installed Ethereal Engine projects."),(0,o.kt)("li",{parentName:"ol"},"GitHub Actions pushes this builder Docker image to the repo ",(0,o.kt)("inlineCode",{parentName:"li"},"xrengine-<release>-builder")," in ECR"),(0,o.kt)("li",{parentName:"ol"},"GitHub Actions updates the builder deployment to point to the builder image it just created."),(0,o.kt)("li",{parentName:"ol"},"The builder deployment spins up the builder Docker image on its single node"),(0,o.kt)("li",{parentName:"ol"},"The builder connects to the deployment's database and checks if there is a table ",(0,o.kt)("inlineCode",{parentName:"li"},"user"),". This is a proxy\nfor the database being seeded; if it does not exist, it seeds the database with the basic Ethereal Engine schema,\nseeds the default project into the database and storage provider, and seeds various types."),(0,o.kt)("li",{parentName:"ol"},"The builder downloads any Ethereal Engine projects that the deployment has added."),(0,o.kt)("li",{parentName:"ol"},"The builder builds the Docker image for each service concurrently using these projects, building them into the client files as well as copying them so that the api and instanceservers have access to them."),(0,o.kt)("li",{parentName:"ol"},"The builder pushes these final Docker images to the repos ",(0,o.kt)("inlineCode",{parentName:"li"},"xrengine-<release>-<service>")," in ECR"),(0,o.kt)("li",{parentName:"ol"},"The builder updates the main deployment to point to the final images it just created."),(0,o.kt)("li",{parentName:"ol"},"The main deployment spins up the final Docker images for the api, analytics, client, and instanceserver services.")),(0,o.kt)("h2",{id:"install-elastic-search-and-kibana-using-helm-for-server-logs"},"Install Elastic Search and Kibana using Helm for Server Logs"),(0,o.kt)("p",null,"To install Elasticsearch, add the elastic repository in Helm: ",(0,o.kt)("inlineCode",{parentName:"p"},"helm repo add elastic https://helm.elastic.co")),(0,o.kt)("p",null,"Now, use the curl command to download the values.yaml file containing configuration information:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"curl -O https://raw.githubusercontent.com/elastic/helm-charts/master/elasticsearch/examples/minikube/values.yaml")),(0,o.kt)("p",null,"Use the helm install command and the values.yaml file to install the Elasticsearch helm chart: "),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"helm install elasticsearch elastic/elasticsearch -f ./values.yaml")),(0,o.kt)("p",null,"The -f option allows specifying the yaml file with the template. If you wish to install Elasticsearch in a specific namespace, add the -n option followed by the name of the namespace: ",(0,o.kt)("inlineCode",{parentName:"p"},"helm install elasticsearch elastic/elasticsearch -n [namespace] -f ./values.yaml")),(0,o.kt)("p",null,"Now check if the cluster members are up: ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl get pods --namespace=default -l app=elasticsearch-master -w")),(0,o.kt)("p",null,"The other option is to use the helm test command to examine the cluster\u2019s health: ",(0,o.kt)("inlineCode",{parentName:"p"},"helm test elasticsearch")),(0,o.kt)("p",null,"To install Kibana on top of Elasticsearch : ",(0,o.kt)("inlineCode",{parentName:"p"},"helm install kibana elastic/kibana"),"\nCheck if all the pods are ready: ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl get pods")),(0,o.kt)("p",null,"After you set up port-forwarding, access Elasticsearch, and the Kibana GUI by typing ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:5601 "),"in your browser"),(0,o.kt)("p",null,"In order to connect logger with elasticsearch, update config file(values.yml) for Xr env ",(0,o.kt)("inlineCode",{parentName:"p"},"api.extraEnv.ELASTIC_HOST")," for e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"http://<username>:<password>@<host>:<port>")),(0,o.kt)("h3",{id:"upgrading-an-existing-helm-deployment"},"Upgrading an existing Helm deployment"),(0,o.kt)("p",null,"One of the features of Helm is being able to easily upgrade deployments with new values. The command to\ndo this is very similar to the install command:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"helm upgrade --reuse-values -f </path/to/*.values.yaml> --set api.image.tag=<latest_github_commit_SHA>,client.image.tag=<latest_github_commit_SHA>,instanceserver.image.tag=<latest_github_commit_SHA> <stage_name> xrengine/xrengine")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"--reuse-values")," says to carry over all configuration values from the previous deployment. This is most important\nfor tags, since they're usually set inline with the ",(0,o.kt)("inlineCode",{parentName:"p"},"helm install/upgrade")," command, not a Helm config.\nUsing ",(0,o.kt)("inlineCode",{parentName:"p"},"-f <config_file>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"--set <variables>")," after it will apply any changes on top of the\ncarryover values."),(0,o.kt)("p",null,"If you're not deploying a new build of the codebase, you can skip the entirety of the ",(0,o.kt)("inlineCode",{parentName:"p"},"--set *.image.tag=<SHA>"),"."))}d.isMDXComponent=!0}}]);