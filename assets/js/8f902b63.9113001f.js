"use strict";(self.webpackChunk_xrengine_docs=self.webpackChunk_xrengine_docs||[]).push([[74562],{3905:function(e,r,n){n.d(r,{Zo:function(){return d},kt:function(){return p}});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=t.createContext({}),l=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},d=function(e){var r=l(e.components);return t.createElement(i.Provider,{value:r},e.children)},f={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(n),p=o,m=u["".concat(i,".").concat(p)]||u[p]||f[p]||a;return n?t.createElement(m,s(s({ref:r},d),{},{components:n})):t.createElement(m,s({ref:r},d))}));function p(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=u;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var l=2;l<a;l++)s[l]=n[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},81872:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var t=n(87462),o=n(63366),a=(n(67294),n(3905)),s=["components"],c={id:"scene_classes_water_shaders_surface_vertex",title:"Module: scene/classes/water/shaders/surface/vertex",sidebar_label:"scene/classes/water/shaders/surface/vertex",sidebar_position:0,custom_edit_url:null},i=void 0,l={unversionedId:"generated/engine/modules/scene_classes_water_shaders_surface_vertex",id:"generated/engine/modules/scene_classes_water_shaders_surface_vertex",title:"Module: scene/classes/water/shaders/surface/vertex",description:"Properties",source:"@site/docs/generated/engine/modules/scene_classes_water_shaders_surface_vertex.md",sourceDirName:"generated/engine/modules",slug:"/generated/engine/modules/scene_classes_water_shaders_surface_vertex",permalink:"/xrengine-docs/docs/generated/engine/modules/scene_classes_water_shaders_surface_vertex",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"scene_classes_water_shaders_surface_vertex",title:"Module: scene/classes/water/shaders/surface/vertex",sidebar_label:"scene/classes/water/shaders/surface/vertex",sidebar_position:0,custom_edit_url:null},sidebar:"sidebar",previous:{title:"scene/classes/water/shaders/surface/fragment",permalink:"/xrengine-docs/docs/generated/engine/modules/scene_classes_water_shaders_surface_fragment"},next:{title:"scene/classes/water/shaders/waves/drop_fragment",permalink:"/xrengine-docs/docs/generated/engine/modules/scene_classes_water_shaders_waves_drop_fragment"}},d=[{value:"Properties",id:"properties",children:[{value:"default",id:"default",children:[],level:3}],level:2}],f={toc:d};function u(e){var r=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,t.Z)({},f,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("h3",{id:"default"},"default"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("strong",{parentName:"p"},"default"),": ",(0,a.kt)("inlineCode",{parentName:"p"},'"\\nuniform sampler2D height;\\nuniform vec3 localCameraPos;\\n\\nvarying vec2 refractedPosition[3];\\nvarying vec3 reflected;\\nvarying float reflectionFactor;\\nvarying vec2 vUv;\\n\\nconst float refractionFactor = 1.;\\n\\nconst float fresnelBias = 0.1;\\nconst float fresnelPower = 2.;\\nconst float fresnelScale = 1.;\\n\\n// Air refractive index / Water refractive index\\nconst float eta = 0.7504;\\n\\nvoid main() {\\n  vec4 info = texture2D(height, position.xy * 0.5 + 0.5);\\n\\n  // The water position is the vertex position on which we apply the height-map\\n  vec3 pos = vec3(position.xy, position.z + info.r);\\n  vec3 norm = normalize(vec3(info.b, sqrt(1.0 - dot(info.ba, info.ba)), info.a)).xzy;\\n\\n  vec3 eye = normalize(pos - localCameraPos);\\n  vec3 refracted = normalize(refract(eye, norm, eta));\\n  reflected = normalize(reflect(eye, norm));\\n\\n  reflectionFactor = fresnelBias + fresnelScale * pow(1. + dot(eye, norm), fresnelPower);\\n\\n  mat4 proj = projectionMatrix * modelViewMatrix;\\n\\n  vec4 projectedRefractedPosition = proj * vec4(pos + refractionFactor * refracted, 1.0);\\n  refractedPosition[0] = projectedRefractedPosition.xy / projectedRefractedPosition.w;\\n\\n  projectedRefractedPosition = proj * vec4(pos + refractionFactor * normalize(refract(eye, norm, eta * 0.96)), 1.0);\\n  refractedPosition[1] = projectedRefractedPosition.xy / projectedRefractedPosition.w;\\n\\n  projectedRefractedPosition = proj * vec4(pos + refractionFactor * normalize(refract(eye, norm, eta * 0.92)), 1.0);\\n  refractedPosition[2] = projectedRefractedPosition.xy / projectedRefractedPosition.w;\\n\\n  vUv = uv;\\n  gl_Position = proj * vec4(pos, 1.0);\\n}\\n"')))}u.isMDXComponent=!0}}]);