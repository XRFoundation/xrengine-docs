"use strict";(self.webpackChunk_xrengine_docs=self.webpackChunk_xrengine_docs||[]).push([[2960],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=d(t),m=o,f=p["".concat(l,".").concat(m)]||p[m]||c[m]||r;return t?a.createElement(f,s(s({ref:n},u),{},{components:t})):a.createElement(f,s({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var d=2;d<r;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5826:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return u}});var a=t(7462),o=t(3366),r=(t(7294),t(3905)),s=["components"],i={},l=void 0,d={unversionedId:"installation/updating-and-seeding-database",id:"installation/updating-and-seeding-database",title:"updating-and-seeding-database",description:"Updating database models",source:"@site/docs/0_installation/12-updating-and-seeding-database.md",sourceDirName:"0_installation",slug:"/installation/updating-and-seeding-database",permalink:"/xrengine-docs/docs/installation/updating-and-seeding-database",editUrl:"https://github.com/XRFoundation/XREngine/packages/docs/docs/0_installation/12-updating-and-seeding-database.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{}},u=[{value:"Updating database models",id:"updating-database-models",children:[],level:2},{value:"Seeding",id:"seeding",children:[],level:2}],c={toc:u};function p(e){var n=e.components,t=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"updating-database-models"},"Updating database models"),(0,r.kt)("p",null,"Tooling for automatically updating the database based on changes in models is included in\n",(0,r.kt)("a",{parentName:"p",href:"../packages/server-core/src/sequelize.ts"},"sequelize.ts"),". Most of it is controlled by setting\nthe environment variable ",(0,r.kt)("inlineCode",{parentName:"p"},"PREPARE_DATABSE=true"),". "),(0,r.kt)("p",null,"If that is set, then the database setup will iterate through every model's fields and try\nto match each one to a column. If it can't find an existing column, then one of two things will happen:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the model has a value ",(0,r.kt)("inlineCode",{parentName:"li"},"oldColumn")," set on the field/foreignKey definition, and that old\ncolumn exists, then the old column will be renamed to the current name of the model field")),(0,r.kt)("p",null,"The following is an example of ",(0,r.kt)("a",{parentName:"p",href:"../packages/server-core/src/user/user/user.model.ts"},"user.model.ts"),"\nwhere the field ",(0,r.kt)("inlineCode",{parentName:"p"},"inviteCode")," will be renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"codeInvite"),", and the association that was called\n",(0,r.kt)("inlineCode",{parentName:"p"},"channelInstanceId")," is renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"instanceChannelId"),". Note the ",(0,r.kt)("inlineCode",{parentName:"p"},"oldColumn")," definition on each."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import { DataTypes, Sequelize, Model } from 'sequelize'\nimport { Application } from '../../../declarations'\nimport { UserInterface } from '@xrengine/common/src/dbmodels/UserInterface'\n\n/**\n * This model contain users information\n */\nexport default (app: Application) => {\n  const sequelizeClient: Sequelize = app.get('sequelizeClient')\n  const User = sequelizeClient.define<Model<UserInterface>>(\n    'user',\n    {\n      id: {\n        type: DataTypes.UUID,\n        defaultValue: DataTypes.UUIDV1,\n        allowNull: false,\n        primaryKey: true\n      },\n      name: {\n        type: DataTypes.STRING,\n        defaultValue: (): string => 'Guest #' + Math.floor(Math.random() * (999 - 100 + 1) + 100),\n        allowNull: false\n      },\n      avatarId: {\n        type: DataTypes.STRING,\n        defaultValue: (): string => '',\n        allowNull: false\n      },\n      codeInvite: {\n        type: DataTypes.STRING,\n        oldColumn: 'inviteCode',\n        unique: true\n      }\n    },\n    {\n      hooks: {\n        beforeCount(options: any): void {\n          options.raw = true\n        }\n      }\n    }\n  )\n\n  ;(User as any).associate = (models: any): void => {\n    ;(User as any).belongsTo(models.user_role, { foreignKey: 'userRole' })\n    ;(User as any).belongsTo(models.instance, { foreignKey: { allowNull: true } }) // user can only be in one room at a time\n    ;(User as any).belongsTo(models.instance, { foreignKey: { name: 'instanceChannelId', oldColumn: 'channelInstanceId', allowNull: true } })\n    ;(User as any).hasOne(models.user_settings)\n    ;(User as any).belongsTo(models.party, { through: 'party_user' }) // user can only be part of one party at a time\n    ;(User as any).belongsToMany(models.user, {\n      as: 'relatedUser',\n      through: models.user_relationship\n    })\n    ;(User as any).hasMany(models.user_relationship, { onDelete: 'cascade' })\n    ;(User as any).belongsToMany(models.group, { through: 'group_user' }) // user can join multiple orgs\n    ;(User as any).hasMany(models.group_user, { unique: false, onDelete: 'cascade' })\n    ;(User as any).hasMany(models.identity_provider, { onDelete: 'cascade' })\n    ;(User as any).hasMany(models.static_resource)\n    // (User as any).hasMany(models.subscription);\n    ;(User as any).hasMany(models.channel, { foreignKey: 'userId1', onDelete: 'cascade' })\n    ;(User as any).hasMany(models.channel, { foreignKey: 'userId2', onDelete: 'cascade' })\n    // (User as any).hasOne(models.seat, { foreignKey: 'userId' });\n    ;(User as any).belongsToMany(models.location, { through: 'location_admin' })\n    ;(User as any).hasMany(models.location_admin, { unique: false })\n    ;(User as any).hasMany(models.location_ban)\n    ;(User as any).hasMany(models.bot, { foreignKey: 'userId' })\n    ;(User as any).hasMany(models.scope, { foreignKey: 'userId' })\n    ;(User as any).belongsToMany(models.instance, { through: 'instance_authorized_user' })\n    ;(User as any).hasOne(models.user_api_key)\n  }\n\n  return User\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the model doesn't have ",(0,r.kt)("inlineCode",{parentName:"li"},"oldColumn"),", or it does and the old column doesn't exist, then it\nwill add a new column")),(0,r.kt)("p",null,"If the column does exist, then the current model for that column is applied to the column"),(0,r.kt)("h2",{id:"seeding"},"Seeding"),(0,r.kt)("p",null,"Seeding happens if either ",(0,r.kt)("inlineCode",{parentName:"p"},"FORCE_DB_REFRESH=true")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"PREPARE_DATABASE=true"),". Each seed template\nis iterated over, and the database is checked to see if that template value exists. Seed templates\nwith IDs are checked via a singular ",(0,r.kt)("inlineCode",{parentName:"p"},".get(<id>)"),", seed templates without an ID are checked via a\n",(0,r.kt)("inlineCode",{parentName:"p"},".find({ query: <template> })")," (settings tables just check if there is a row present, and assumes\nthat its presence is indicative of being seeded already). If a seed template is not found,\nthen it is inserted into the database."))}p.isMDXComponent=!0}}]);