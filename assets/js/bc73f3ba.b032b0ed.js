"use strict";(self.webpackChunk_xrengine_docs=self.webpackChunk_xrengine_docs||[]).push([[6934],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=s(n),h=a,m=p["".concat(c,".").concat(h)]||p[h]||u[h]||o;return n?r.createElement(m,l(l({ref:t},d),{},{components:n})):r.createElement(m,l({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},42116:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return d}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),l=["components"],i={},c="Old Docker Instructions",s={unversionedId:"installation/docker",id:"installation/docker",title:"Old Docker Instructions",description:"You can quickstart locally using docker, if you don't have node installed or",source:"@site/docs/0_installation/docker.md",sourceDirName:"0_installation",slug:"/installation/docker",permalink:"/xrengine-docs/docs/installation/docker",editUrl:"https://github.com/XRFoundation/XREngine/packages/docs/docs/0_installation/docker.md",tags:[],version:"current",frontMatter:{}},d=[{value:"Get local IP address",id:"get-local-ip-address",children:[],level:2},{value:"Start local databases",id:"start-local-databases",children:[],level:2},{value:"Build the image",id:"build-the-image",children:[],level:2},{value:"Run the server to seed the database, wait a couple minutes, then delete it",id:"run-the-server-to-seed-the-database-wait-a-couple-minutes-then-delete-it",children:[],level:2},{value:"Run the images",id:"run-the-images",children:[],level:2},{value:"Delete containers, if you want to run a new build, or just get rid of them",id:"delete-containers-if-you-want-to-run-a-new-build-or-just-get-rid-of-them",children:[],level:2}],u={toc:d};function p(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"old-docker-instructions"},"Old Docker Instructions"),(0,o.kt)("p",null,"You can quickstart locally using docker, if you don't have node installed or\njust want to test the latest."),(0,o.kt)("h2",{id:"get-local-ip-address"},"Get local IP address"),(0,o.kt)("p",null,"Use a tool like ifconfig to get your local IP address."),(0,o.kt)("h2",{id:"start-local-databases"},"Start local databases"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd scripts\ndocker-compose up\n")),(0,o.kt)("p",null,"When the logging stops, that indicates that the databases have been created and\nare running."),(0,o.kt)("p",null,"Ctrl+c out of that, then from scripts run ",(0,o.kt)("inlineCode",{parentName:"p"},"./start-all-docker.sh"),"\n(This must be run every time you start your machine anew)"),(0,o.kt)("h2",{id:"build-the-image"},"Build the image"),(0,o.kt)("p",null,"Create an empty folder at the root called ",(0,o.kt)("inlineCode",{parentName:"p"},"project-package-jsons")," and the run\nthe following command to build:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'DOCKER_BUILDKIT=1 docker build -t xrengine --build-arg MYSQL_USER=server \\\n  --build-arg MYSQL_PASSWORD=password --build-arg MYSQL_HOST=127.0.0.1 \\\n  --build-arg MYSQL_DATABASE=xrengine --build-arg MYSQL_PORT=3304 \\\n  --build-arg VITE_SERVER_HOST=localhost --build-arg VITE_SERVER_PORT=3030 \\\n  --build-arg VITE_GAMESERVER_HOST=localhost --build-arg VITE_GAMESERVER_PORT=3031 \\\n  --build-arg VITE_LOCAL_BUILD=true --build-arg CACHE_DATE="$(date)" --network="host" .\n')),(0,o.kt)("h2",{id:"run-the-server-to-seed-the-database-wait-a-couple-minutes-then-delete-it"},"Run the server to seed the database, wait a couple minutes, then delete it"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'docker run -d --name server --env-file .env.local.default -e "SERVER_MODE=api" -e "FORCE_DB_REFRESH=true" --network host xrengine\ndocker logs server -f\n-Wait for the line "Server Ready", then Ctrl+c out of the logs-\ndocker container stop server\ndocker container rm server\n')),(0,o.kt)("h2",{id:"run-the-images"},"Run the images"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'docker run -d --name serve-local --env-file .env.local.default -e "SERVER_MODE=serve-local" --network host xrengine\ndocker run -d --name server --env-file .env.local.default -e "SERVER_MODE=api" -e "GAMESERVER_HOST=<local IP address" --network host xrengine\ndocker run -d --name client --env-file .env.local.default -e "SERVER_MODE=client" --network host xrengine\ndocker run -d --name world --env-file .env.local.default -e "SERVER_MODE=realtime" -e "GAMESERVER_HOST=<local IP address>" --network host xrengine\ndocker run -d --name channel --env-file .env.local.default -e "SERVER_MODE=realtime" -e "GAMESERVER_HOST=<local IP address>" -e "GAMESERVER_PORT=3032" --network host xrengine\n')),(0,o.kt)("h2",{id:"delete-containers-if-you-want-to-run-a-new-build-or-just-get-rid-of-them"},"Delete containers, if you want to run a new build, or just get rid of them"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker container stop serve-local\ndocker container rm serve-local\ndocker container stop server\ndocker container rm server\ndocker container stop client\ndocker container rm client\ndocker container stop world\ndocker container rm world\ndocker container stop channel\ndocker container rm channel\n")))}p.isMDXComponent=!0}}]);